import it.cnr.iit.epas.security.PermissionCheck
import it.cnr.iit.epas.models.enumerate.AccountRole
import it.cnr.iit.epas.models.UsersRolesOffices;
import it.cnr.iit.epas.models.Office;
import it.cnr.iit.epas.models.Person;
import it.cnr.iit.epas.models.Role;


global it.cnr.iit.epas.models.User currentUser;
global java.util.Set userRoles;
global java.util.List userRolesOffices;

/*******************************************************************************
 * Azioni ruolo DEVELOPER e ADMIN
 ******************************************************************************/
rule SystemUsers
salience 1
activation-group 'admin'
when
  AccountRole(this in (AccountRole.DEVELOPER,AccountRole.ADMIN)) from userRoles
  $c: PermissionCheck(toCheck())
then
  $c.grant();
end

rule AnyUser
when
 $c: PermissionCheck(
    permission.startsWith("/rest/v4/userinfo") ||
    permission.startsWith("/rest/v4/personinfo"),
    toCheck())
then
 $c.grant();
end

/*******************************************************************************
 * Azioni utente IsEmployee
 ******************************************************************************/

rule Employee_personal_data
when
 $c: PermissionCheck(
    (permission.startsWith("/rest/v4/vacations") && httpMethod.equalsIgnoreCase('GET')),
    toCheck(), target == null)
then
 $c.grant();
end

rule IsEmployee_personal_data_usingTarget
when
 $p: Person(user == currentUser)
 $c: PermissionCheck(
    (permission.startsWith("/rest/v4/vacations") && httpMethod.equalsIgnoreCase('GET')),
    toCheck(), target == $p)
then
 $c.grant();
end

/*******************************************************************************
 * Azioni utente con ruolo BADGE_READER
 ******************************************************************************/

rule Stampings_create
when
 $uro: UsersRolesOffices() from userRolesOffices
 Role(name == Role.BADGE_READER) from $uro.role
 $c: PermissionCheck(
    permission.startsWith("/rest/v4/stampingsfromclient/create") ||
    permission.startsWith("/rest/v4/stampingsfromclient/createnotrecompute"),
    toCheck(), target == null)
 then
 $c.grant();
end

rule Stampings_create_InOffice
when
 $uro: UsersRolesOffices() from userRolesOffices
 $o: Office(usersRolesOffices contains $uro)
 Role(name == Role.BADGE_READER) from $uro.role
 $c: PermissionCheck(
    permission.startsWith("/rest/v4/stampingsfromclient/create") ||
    permission.startsWith("/rest/v4/stampingsfromclient/createnotrecompute"),
    toCheck(), target == $o)
then
 $c.grant();
end

/*******************************************************************************
 * Gestione dei dati degli ufficio ruolo TECHNICAL_ADMIN
 ******************************************************************************/

rule Offices_show_and_update_technical_admin
when
 $uro: UsersRolesOffices() from userRolesOffices
 Role(name == Role.TECHNICAL_ADMIN) from $uro.role
 $c: PermissionCheck(
    permission.startsWith("/rest/v4/offices/update") ||
    permission.startsWith("/rest/v4/offices/show"),
    toCheck(), target == null)
 then
 $c.grant();
end

rule Offices_show_and_update_technical_admin_InOffice
when
 $uro: UsersRolesOffices() from userRolesOffices
 $o: Office(usersRolesOffices contains $uro)
 Role(name == Role.TECHNICAL_ADMIN) from $uro.role
 $c: PermissionCheck(
    permission.startsWith("/rest/v4/offices/update") ||
    permission.startsWith("/rest/v4/offices/show"),
    toCheck(), target == $o)
then
 $c.grant();
end
